// Generated by CoffeeScript 1.8.0
(function() {
  var PathExp, async, colors, context, groupby, render, unwrap, utils, _;

  _ = require('underscore');

  async = require('async');

  colors = require('colors');

  PathExp = require('simple-path-expressions').PathExp;

  groupby = require('groupby-cli');

  context = require('./context');

  render = require('./render');

  utils = require('./utils');

  unwrap = utils.string.unwrap;

  module.exports = function(layoutPattern, outputPattern, contextEnum, globalsEnum, options, callback) {
    var contexts, globals, layoutTemplate, offenders, outputPlaceholders, outputTemplate, renderer, renderingOptions, start;
    start = new Date();
    _.defaults(options, {
      key: 'items'
    });
    contexts = context.load(contextEnum);
    globals = context.load(globalsEnum);
    layoutTemplate = new PathExp(layoutPattern);
    outputTemplate = new PathExp(outputPattern || '');
    outputPlaceholders = _.pluck(outputTemplate.placeholders, 'name');
    if (options.root) {
      contexts = contexts[options.root];
    }
    if (options.pairs) {
      contexts = (_.pairs(contexts)).map(function(_arg) {
        var key, value;
        key = _arg[0], value = _arg[1];
        return {
          key: key,
          value: value
        };
      });
    }
    if (!options.many) {
      contexts = [contexts];
    }
    if (globals) {
      contexts.forEach(function(context) {
        return _.defaults(context, globals);
      });
    }
    if (options.many && !options.fast) {
      offenders = groupby.clashes(contexts, outputPlaceholders);
      if (offenders.length) {
        offenders = offenders.join(', ');
        throw new Error(unwrap("Found more than one context set for " + offenders + ". Pick an output filename template that produces a unique filename for each set of context."));
      }
    }
    if (options.many) {
      if (!outputTemplate.hasPlaceholders) {
        throw new Error(unwrap("Rendering a collection requires an output filename template with placeholders, to avoid rendering each context set to the same file."));
      }
      if (contexts.constructor !== Array) {
        throw new Error("Rendering a collection requires input in the form of an array. If your data is an object, consider specifying --many-pairs.");
      }
    }
    renderingOptions = _.pick(options, 'engine', 'key', 'newerThan', 'force', 'verbose');
    _.extend(renderingOptions, {
      output: outputTemplate
    });
    renderer = _.partial(render, layoutTemplate, _, renderingOptions);
    return async.mapSeries(contexts, renderer, function(err, operations) {
      var counts, duration, preciseDuration, stop;
      counts = _.countBy(operations, _.identity);
      _.defaults(counts, {
        rendered: 'no',
        skipped: 'none'
      });
      stop = new Date();
      preciseDuration = (stop - start) / 1000;
      duration = utils.round(preciseDuration, 2);
      if (options.verbose) {
        if (counts.rendered !== 'no') {
          console.log('');
        }
        console.log(unwrap("Rendered " + (counts.rendered.toString().bold) + " pages and skipped " + (counts.skipped.toString().bold) + " in " + (duration.toString().bold) + " seconds."));
        return callback(err);
      }
    });
  };

}).call(this);
